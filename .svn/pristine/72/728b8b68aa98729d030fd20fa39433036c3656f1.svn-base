package tdh.ifm.android.imatch.app.ui.activity.driver;

import android.graphics.Bitmap;
import android.text.TextUtils;
import android.text.method.HideReturnsTransformationMethod;
import android.text.method.PasswordTransformationMethod;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import com.tdh.common.utils.APPLog;
import com.tdh.common.utils.CommonUtil;

import butterknife.BindBitmap;
import butterknife.BindView;
import butterknife.OnClick;
import tdh.ifm.android.imatch.app.R;
import tdh.ifm.android.imatch.app.base.BaseActivity;
import tdh.ifm.android.imatch.app.base.BaseResponse;
import tdh.ifm.android.imatch.app.bean.RegisterDriver;
import tdh.ifm.android.imatch.app.presenter.RegisterDriverPresenterImpl;
import tdh.ifm.android.imatch.app.ui.view.MyTitleView;
import tdh.ifm.android.imatch.app.utils.Constants;
import tdh.ifm.android.imatch.app.utils.Util;
import tdh.ifm.android.imatch.app.view.RegisterView;

/**
 * xyf
 * 司机注册
 * Created by tdh on 2017/4/28
 */

public class DriverRegisterActivity extends BaseActivity implements RegisterView{

    @BindView(R.id.titleview)
    MyTitleView titleview;

    @BindView(R.id.et_mobile)
    EditText etMobile;
    @BindView(R.id.et_password)
    EditText etPassword;
    @BindView(R.id.img_pwd)
    ImageView imgPwd;
    @BindView(R.id.et_name)
    EditText etName;
    @BindView(R.id.et_plate_number)
    EditText etPlateNumber;
    @BindView(R.id.et_car_length)
    EditText etCarLength;
    @BindView(R.id.et_load)
    EditText etLoad;
    @BindView(R.id.et_car_type)
    EditText etCarType;
    @BindView(R.id.et_verification_code)
    EditText etVerificationCode;
    @BindView(R.id.btn_reset_identify_code)
    TextView btnResetIdentifyCode;
    @BindView(R.id.btn_drivate_register)
    Button btnDrivateRegister;

    @BindBitmap(R.mipmap.login_pwd_visible)
    Bitmap pwdVisible;
    @BindBitmap(R.mipmap.login_pwd_invisible)
    Bitmap pwdInVisible;

    private int type;
    /** 密码是否可见  默认不可见 **/
    private boolean isPwdVisible;

    private RegisterDriver registerDriver;
    private RegisterDriverPresenterImpl registerDriverPresenter;


    @Override
    public int getContentViewId() {
        return R.layout.activity_driver_register;
    }

    @Override
    public void initData() {
        registerDriver = new RegisterDriver();
        registerDriverPresenter = new RegisterDriverPresenterImpl(context, this);
    }

    @Override
    public void initTitleView() {
        titleview.getTv_title().setText("注册司机");
        titleview.getBack().setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });
    }

    private boolean isNull() {
        if (TextUtils.isEmpty(getValue(etMobile))) {
            CommonUtil.getToast(context, getString(R.string.prompt_mobile));
            return false;
        }
        if (TextUtils.isEmpty(getValue(etPassword))) {
            CommonUtil.getToast(context, getString(R.string.prompt_password));
            return false;
        }
        if (TextUtils.isEmpty(getValue(etName))) {
            CommonUtil.getToast(context, getString(R.string.prompt_name));
            return false;
        }
        if (TextUtils.isEmpty(getValue(etCarLength))){
            CommonUtil.getToast(context,getString(R.string.prompt_car_length));
        }
        if (TextUtils.isEmpty(getValue(etPlateNumber))) {
            CommonUtil.getToast(context, getString(R.string.prompt_plate_number));
            return false;
        }
        if (TextUtils.isEmpty(getValue(etLoad))) {
            CommonUtil.getToast(context, getString(R.string.prompt_load));
            return false;
        }
        return true;
    }

    @OnClick(R.id.img_pwd)
    public void onIvPwdClicked() {
        if (isPwdVisible) {
            /** 密码不可见 **/
            isPwdVisible = false;
            imgPwd.setImageBitmap(pwdInVisible);
            etPassword.setTransformationMethod(PasswordTransformationMethod.getInstance());
        }else {
            /** 密码可见 **/
            isPwdVisible = true;
            imgPwd.setImageBitmap(pwdVisible);
            etPassword.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
        }
    }

    //选择车长
    @OnClick(R.id.ll_car_length)
    void showVanlength() {
        Util.showDialogData(context, Constants.stkLenKeys, Constants.stkLenValues, "请选择车长",etCarLength);
    }

    //选择车型
    @OnClick(R.id.ll_car_type)
    void showVanType() {
        Util.showDialogData(context,Constants.tkcartypeKeys, Constants.tkcarTypeValues, "请选择车型",etCarType);
    }

    @OnClick(R.id.btn_drivate_register)
    void register(){
        if (!isNull()) {
            return;
        }
        registerDriver.setMobile(getValue(etMobile));
        registerDriver.setCode(getValue(etPassword));
        registerDriver.setUsername(getValue(etName));
        registerDriver.setVehiclePlateNo(getValue(etPlateNumber));
        registerDriverPresenter.registerDriver(registerDriver);
    }

    @Override
    public void showProgress() {
        dialogShow();
    }

    @Override
    public void hideprogress() {
        dialogHide();
    }

    @Override
    public void showFailure(String str, Throwable t) {
        APPLog.error(str, t);
    }

    @Override
    public void showResState(int code) {
        Util.setResCode(context, code);
    }

    @Override
    public void onRegisterDriverSuccess(BaseResponse baseResponse) {
        if (baseResponse.isSuccess()) {
            CommonUtil.getToast(context, baseResponse.getMessage());
            setResult(10);
            finish();

        } else {
            CommonUtil.getToast(context, baseResponse.getMessage());
        }
    }
}
