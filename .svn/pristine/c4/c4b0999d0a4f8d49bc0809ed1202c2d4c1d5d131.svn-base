package tdh.ifm.android.imatch.app.model;

import android.content.Context;

import com.tdh.common.utils.APPLog;

import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import tdh.ifm.android.imatch.app.base.BaseNet;
import tdh.ifm.android.imatch.app.base.BasePageList;
import tdh.ifm.android.imatch.app.base.BaseRequest;
import tdh.ifm.android.imatch.app.base.BaseResponse;
import tdh.ifm.android.imatch.app.bean.FriendInfo;
import tdh.ifm.android.imatch.app.bean.RegisterDriver;
import tdh.ifm.android.imatch.app.bean.RequestFriendList;
import tdh.ifm.android.imatch.app.bean.RequestFriend;
import tdh.ifm.android.imatch.app.bean.RequestLogin;
import tdh.ifm.android.imatch.app.bean.RequestPhone;
import tdh.ifm.android.imatch.app.bean.User;
import tdh.ifm.android.imatch.app.utils.Util;

/**
 * Author：gwx
 * Create at：2017/5/5 14:54
 */
public class UserModelImpl extends BaseNet implements UserModel {

    public UserModelImpl(Context context) {
        super(context);
    }

    @Override
    public void loginIn(RequestLogin request, final OnLoginInListener listener) {
        BaseRequest<RequestLogin> baseRequest = new BaseRequest<>();
        baseRequest.setBody(request);
        String json = gson.toJson(baseRequest);
        Call<BaseResponse<User>> call = api.loginIn(getBody(json));
        call.enqueue(new Callback<BaseResponse<User>>() {
            @Override
            public void onResponse(Call<BaseResponse<User>> call, Response<BaseResponse<User>> response) {
                if (response.code() == 200) {
                    int code = Util.getResCode(response.body());
                    if (code == 200) {
                        listener.onLoginInSuccess(response.body());
                    } else {
                        listener.onResState(code);
                    }
                } else {
                    listener.onResState(response.code());
                }
            }

            @Override
            public void onFailure(Call<BaseResponse<User>> call, Throwable t) {
                APPLog.error(t.getMessage(), t);
            }
        });
    }

    @Override
    public void loginOut(final OnLoginOutListener listener) {
        BaseRequest<RequestLogin> baseRequest = new BaseRequest<>();
        String json = gson.toJson(baseRequest);
        Call<BaseResponse> call = api.loginOut(getBody(json));
        call.enqueue(new Callback<BaseResponse>() {
            @Override
            public void onResponse(Call<BaseResponse> call, Response<BaseResponse> response) {
                if (response.code() == 200) {
                    int code = Util.getResCode(response.body());
                    if (code == 200) {
                        listener.onLoginOutSuccess(response.body());
                    } else {
                        listener.onResState(code);
                    }
                } else {
                    listener.onResState(response.code());
                }
            }

            @Override
            public void onFailure(Call<BaseResponse> call, Throwable t) {
                APPLog.error(t.getMessage(), t);
            }
        });
    }

    @Override
    public void sendLoginCode(RequestPhone requestPhone, final OnLoginInListener listener) {
        BaseRequest<RequestPhone> baseRequest = new BaseRequest<>();
        baseRequest.setBody(requestPhone);
        String json = gson.toJson(baseRequest);
        Call<BaseResponse> call = api.sendLoginCode(getBody(json));
        call.enqueue(new Callback<BaseResponse>() {
            @Override
            public void onResponse(Call<BaseResponse> call, Response<BaseResponse> response) {
                if (response.code() == 200) {
                    int code = Util.getResCode(response.body());
                    if (code == 200) {
                        listener.onSendLoginCodeSuccess(response.body());
                    } else {
                        listener.onResState(code);
                    }
                } else {
                    listener.onResState(response.code());
                }
            }

            @Override
            public void onFailure(Call<BaseResponse> call, Throwable t) {
                APPLog.error(t.getMessage(), t);
            }
        });
    }

    @Override
    public void getFriendList(final RequestFriendList request, final  OnFriendListener listener) {
        BaseRequest<RequestFriendList> baseRequest = new BaseRequest<>();
        baseRequest.setBody(request);
        String json = gson.toJson(baseRequest);
        Call<BaseResponse<BasePageList<List<FriendInfo>>>> call = api.friendList(getBody(json));
        call.enqueue(new Callback<BaseResponse<BasePageList<List<FriendInfo>>>>() {
            @Override
            public void onResponse(Call<BaseResponse<BasePageList<List<FriendInfo>>>> call, Response<BaseResponse<BasePageList<List<FriendInfo>>>> response) {
                if (response.code() == 200) {
                    int code = Util.getResCode(response.body());
                    if (code == 200) {
                        listener.onFriendListSuccess(response.body());
                    } else {
                        listener.onResState(code);
                    }
                } else {
                    listener.onResState(response.code());
                }
            }

            @Override
            public void onFailure(Call<BaseResponse<BasePageList<List<FriendInfo>>>> call, Throwable t) {
                APPLog.error(t.getMessage(), t);
            }
        });
    }

    @Override
    public void getFriendList(RequestFriendList request, OnAddFriendList listener) {

    }

    @Override
    public void deleteFriend(RequestFriend request, final  OnFriendListener listener) {
        BaseRequest<RequestFriend> baseRequest = new BaseRequest<>();
        baseRequest.setBody(request);
        String json = gson.toJson(baseRequest);
        Call<BaseResponse> call = api.deleteFriend(getBody(json));
        call.enqueue(new Callback<BaseResponse>() {
            @Override
            public void onResponse(Call<BaseResponse> call, Response<BaseResponse> response) {
                if (response.code() == 200) {
                    int code = Util.getResCode(response.body());
                    if (code == 200) {
                        listener.onDeleteFriendSuccess(response.body());
                    } else {
                        listener.onResState(code);
                    }
                } else {
                    listener.onResState(response.code());
                }
            }

            @Override
            public void onFailure(Call<BaseResponse> call, Throwable t) {
                APPLog.error(t.getMessage(), t);
            }
        });
    }

    @Override
    public void addFriend(RequestFriend request, final  OnAddFriendList listener) {
        BaseRequest<RequestFriend> baseRequest = new BaseRequest<>();
        baseRequest.setBody(request);
        String json = gson.toJson(baseRequest);
        Call<BaseResponse> call = api.addFriend(getBody(json));
        call.enqueue(new Callback<BaseResponse>() {
            @Override
            public void onResponse(Call<BaseResponse> call, Response<BaseResponse> response) {
                if (response.code() == 200) {
                    int code = Util.getResCode(response.body());
                    if (code == 200) {
                        listener.onAddFriendSuccess(response.body());
                    } else {
                        listener.onResState(code);
                    }
                } else {
                    listener.onResState(response.code());
                }
            }

            @Override
            public void onFailure(Call<BaseResponse> call, Throwable t) {
                APPLog.error(t.getMessage(), t);
            }
        });
    }

    @Override
    public void registerDriver(RegisterDriver request, final onRegisterDriverListener listener) {

        BaseRequest<RegisterDriver> baseRequest = new BaseRequest<>();
        baseRequest.setBody(request);
        String json = gson.toJson(baseRequest);
        Call<BaseResponse> call = api.registerDriver(getBody(json));
        call.enqueue(new Callback<BaseResponse>() {
            @Override
            public void onResponse(Call<BaseResponse> call, Response<BaseResponse> response) {
                if (response.code() == 200) {
                    int code = Util.getResCode(response.body());
                    if (code == 200) {
                        listener.onRegisterDriverSuccess(response.body());
                    } else {
                        listener.onResState(code);
                    }
                } else {
                    listener.onResState(response.code());
                }
            }

            @Override
            public void onFailure(Call<BaseResponse> call, Throwable t) {
                APPLog.error(t.getMessage(), t);
            }
        });
    }


}
